using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Unity.VisualScripting.Dependencies.Sqlite;
using UnityEngine;

namespace Ecs.Utils.SystemsGenerator
{
    public class EcsSystemsGenerator
    {
        private static readonly HashSet<EcsSystemTemplate> EcsInstallers = new();

		public static EcsSystemTemplate[] Generate()
		{
			var executionTypes = Enum.GetValues(typeof(ExecutionType)) as ExecutionType[];
			foreach (var executionType in executionTypes)
			{
				EcsInstallers.Add(new EcsSystemTemplate(executionType));
			}

			var assemblies = AppDomain.CurrentDomain.GetAssemblies();
			foreach (var assembly in assemblies)
			{
				var types = assembly.GetTypes();

				foreach (var type in types)
				{
					if (!type.IsDefined(typeof(InstallAttribute), false) ||
					    type.IsDefined(typeof(IgnoreAttribute), false))
						continue;

					var attribute = type.GetCustomAttribute(typeof(InstallAttribute), false) as InstallAttribute;

					foreach (var installerTemplate in EcsInstallers)
					{
						if (!attribute.Type.HasFlag(installerTemplate.Type))
							continue;
						AddToTemplate(installerTemplate, type, attribute);
					}
				}
			}

			foreach (var template in EcsInstallers)
			{
				var generatedInstallerCode =
					GenerateInstaller(template.Name, template.Container, template.Namespaces);
				template.GeneratedInstallerCode = generatedInstallerCode;
				Debug.Log($"[EcsInstallerGenerator] Generated {template.Type}: {template.Counter}");
			}

			var installerTemplates = EcsInstallers.ToArray();
			EcsInstallers.Clear();
			return installerTemplates;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static string GenerateInstaller(
			string name,
			Dictionary<ExecutionPriority, List<TypeElement>> container,
			List<string> nameSpaces
		)
		{
			var nameSpacesSorted = nameSpaces.Distinct();
			var stringBuilder = new StringBuilder();
			foreach (var s in nameSpacesSorted)
				stringBuilder.Append("using " + s + ";\n");
			var ns = stringBuilder.ToString();

			stringBuilder.Clear();
			var methodBuilder = new StringBuilder();
			var bodyBuilder = new StringBuilder();
			foreach (var kpv in container)
			{
				var methodName = kpv.Key.ToString();
				var body = GetBinds(kpv.Value, stringBuilder);
				if (body.Length <= 1) continue;
				
				methodBuilder.Append(GetMethod(methodName));
				bodyBuilder.Append(GetMethodBody(methodName, body));
			}

			return GetInstaller(name, ns, methodBuilder.ToString(), bodyBuilder.ToString());
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void AddToTemplate(EcsSystemTemplate template, Type type, InstallAttribute attribute)
		{
			template.Counter++;
			template.Container[attribute.Priority].Add(new TypeElement(type, attribute));
			template.Namespaces.Add(type.Namespace);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static string GetBinds(List<TypeElement> types, StringBuilder builder)
		{
			types.Sort((a, b) => a.Order.CompareTo(b.Order));
			builder.Clear();
			var previous = 100000;
			
			foreach (var typeElement in types)
			{
				if (Math.Abs(previous - typeElement.Order) > 10)
					builder.Append(typeElement.Order == 100000 ? $"\n			// No order\n" : $"\n			// {typeElement.Name} {typeElement.Order:0000}\n");
				previous = typeElement.Order;
			}

			return builder.ToString();
		}
		

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static string GetMethod(string name)
			=> $"			{name}(container, isDebug);\n";

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static string GetMethodBody(string name, string body)
			=> $@"		private static void {name}(DiContainer container, bool isDebug) {{{$"\n {body}		"} }}

";

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static string GetInstaller(
			string name,
			string ns,
			string methods,
			string body
		)
			=> $@"{ns}
using Zenject;  

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SystemsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Ecs.Installers {{
	public static class {name} {{
		public static void Install(DiContainer container){{
{methods}		}}

{body}	}}
}}";
	}
}